{"version":3,"file":"eslint-config-formatting.mjs","sources":["../src/globPatterns.js","../src/baseConfig.js","../src/formatting/jsConfig.js","../src/formatting/tsConfig.js","../src/formatting.js"],"sourcesContent":["export const allFiles = '**/*.{js,cjs,mjs,ts,cts,mts}';\nexport const jsFiles = '**/*.{js,cjs,mjs}';\nexport const tsFiles = '**/*.{ts,cts,mts}';\n\n","import babelParser from '@babel/eslint-parser';\nimport babelPlugin from '@babel/eslint-plugin';\nimport envPreset from '@babel/preset-env';\nimport importAttributesSyntaxPlugin from '@babel/plugin-syntax-import-attributes';\nimport stylisticPlugin from '@stylistic/eslint-plugin';\nimport typescriptParser from '@typescript-eslint/parser';\nimport typescript from '@typescript-eslint/eslint-plugin';\nimport globals from 'globals';\nimport * as globPatterns from './globPatterns.js';\n\nexport function baseConfig( {\n\ttsProject = [ './tsconfig.json' ]\n} = {} )  {\n\treturn [\n\t\t{\n\t\t\tignores: [\n\t\t\t\t'**/bin/**/*',\n\t\t\t\t'**/build/**/*',\n\t\t\t\t'**/dist/**/*',\n\t\t\t\t'**/tests/__fixtures__/**/*'\n\t\t\t]\n\t\t},\n\n\t\t{\n\t\t\tlanguageOptions: {\n\t\t\t\tglobals: {\n\t\t\t\t\t...globals.nodeBuiltin,\n\t\t\t\t\tglobalThis: 'readonly'\n\t\t\t\t},\n\n\t\t\t\tsourceType: 'module',\n\t\t\t\tecmaVersion: 'latest',\n\t\t\t\tparserOptions: {\n\t\t\t\t\tecmaFeatures: {\n\t\t\t\t\t\timpliedStrict: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t{\n\t\t\tfiles: [\n\t\t\t\tglobPatterns.allFiles\n\t\t\t],\n\n\t\t\tplugins: {\n\t\t\t\t'@babel': babelPlugin,\n\t\t\t\t'@stylistic': stylisticPlugin\n\t\t\t},\n\n\t\t\tlanguageOptions: {\n\t\t\t\tparser: babelParser,\n\t\t\t\tparserOptions: {\n\t\t\t\t\trequireConfigFile: false,\n\t\t\t\t\tsourceType: 'module',\n\t\t\t\t\tbabelOptions: {\n\t\t\t\t\t\tbabelrc: false,\n\t\t\t\t\t\tconfigFile: false,\n\t\t\t\t\t\tpresets: [\n\t\t\t\t\t\t\tenvPreset\n\t\t\t\t\t\t],\n\t\t\t\t\t\tplugins: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\timportAttributesSyntaxPlugin,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdeprecatedAssertSyntax: true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t{\n\t\t\tfiles: [\n\t\t\t\tglobPatterns.tsFiles\n\t\t\t],\n\n\t\t\tplugins: {\n\t\t\t\t'@typescript-eslint': typescript\n\t\t\t},\n\n\t\t\tlanguageOptions: {\n\t\t\t\tparser: typescriptParser,\n\t\t\t\tparserOptions: {\n\t\t\t\t\tsourceType: 'module',\n\t\t\t\t\tproject: tsProject\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t];\n}\n","import * as globPatterns from '../globPatterns.js';\n\nexport const jsConfig = {\n\tfiles: [\n\t\tglobPatterns.allFiles\n\t],\n\n\trules: {\n\t\t'@stylistic/array-bracket-spacing': [ 'error', 'always' ],\n\t\t'array-callback-return': 'error',\n\t\t'arrow-body-style': [ 'error', 'always' ],\n\t\t'@stylistic/arrow-parens': [ 'error', 'always' ],\n\t\t'@stylistic/arrow-spacing': [ 'error', {\n\t\t\tafter: true,\n\t\t\tbefore: true\n\t\t} ],\n\t\t'@stylistic/block-spacing': 'error',\n\t\t'@stylistic/brace-style': [ 'error', '1tbs' ],\n\t\tcamelcase: [ 'error', {\n\t\t\tproperties: 'always'\n\t\t} ],\n\t\t'@stylistic/comma-dangle': [ 'error', 'never' ],\n\t\t'@stylistic/comma-spacing': [ 'error', {\n\t\t\tafter: true,\n\t\t\tbefore: false\n\t\t} ],\n\t\t'@stylistic/comma-style': [ 'error', 'last' ],\n\t\t'@stylistic/computed-property-spacing': [ 'error', 'always' ],\n\t\tcurly: 'error',\n\t\t'@stylistic/dot-location': [ 'error', 'object' ],\n\t\t'dot-notation': 'error',\n\t\t'@stylistic/eol-last': 'error',\n\t\t'func-style': [ 'error', 'declaration', {\n\t\t\tallowArrowFunctions: true\n\t\t} ],\n\t\t'@stylistic/generator-star-spacing': [ 'error', 'after' ],\n\t\t'@stylistic/indent': [ 'error', 'tab' ],\n\t\t'@stylistic/key-spacing': [ 'error', {\n\t\t\tafterColon: true,\n\t\t\tbeforeColon: false,\n\t\t\tmode: 'strict'\n\t\t} ],\n\t\t'@stylistic/keyword-spacing': 'error',\n\t\t'@stylistic/linebreak-style': [ 'error', 'unix' ],\n\t\t'@stylistic/new-parens': 'error',\n\t\t'@stylistic/no-extra-semi': 'error',\n\t\t'no-irregular-whitespace': 'error',\n\t\t'@stylistic/no-mixed-spaces-and-tabs': 'error',\n\t\t'@stylistic/no-multiple-empty-lines': [ 'error', {\n\t\t\tmax: 1\n\t\t} ],\n\t\t'@stylistic/no-trailing-spaces': 'error',\n\t\t'object-curly-spacing': 'off',\n\t\t'@stylistic/object-curly-spacing': 'off',\n\t\t'@babel/object-curly-spacing': [ 'error', 'always' ],\n\t\t'object-shorthand': [ 'error', 'always' ],\n\t\t'@stylistic/quotes': [ 'error', 'single' ],\n\t\t'@stylistic/semi': 'error',\n\t\t'@stylistic/space-before-function-paren': [ 'error', {\n\t\t\tanonymous: 'never',\n\t\t\tnamed: 'never',\n\t\t\tasyncArrow: 'always'\n\t\t} ],\n\t\t'@stylistic/space-in-parens': [ 'error', 'always' ],\n\t\t'@stylistic/space-infix-ops': 'error',\n\t\t'@stylistic/space-unary-ops': 'error',\n\t\t'@stylistic/spaced-comment': [ 'error', 'always' ],\n\t\t'@stylistic/wrap-iife': [ 'error', 'outside' ],\n\t\t'@stylistic/yield-star-spacing': [ 'error', 'after' ]\n\t}\n};\n","import * as globPatterns from '../globPatterns.js';\n\nexport const tsConfig = {\n\tfiles: [\n\t\tglobPatterns.tsFiles\n\t],\n\n\trules: {\n\t\t'@stylistic/member-delimiter-style': 'error',\n\t\t'@stylistic/type-annotation-spacing': [\n\t\t\t'error',\n\t\t\t{\n\t\t\t\tbefore: false,\n\t\t\t\tafter: true,\n\t\t\t\toverrides: {\n\t\t\t\t\tarrow: {\n\t\t\t\t\t\tbefore: true,\n\t\t\t\t\t\tafter: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n};\n","import { baseConfig } from './baseConfig.js';\nimport { jsConfig } from './formatting/jsConfig.js';\nimport { tsConfig } from './formatting/tsConfig.js';\n\nexport function formattingConfig( {\n\ttsProject = [ './tsconfig.json' ]\n} = {} ) {\n\treturn [\n\t\t...baseConfig( { tsProject } ),\n\t\tjsConfig,\n\t\ttsConfig\n\t];\n}\n"],"names":["allFiles","tsFiles","baseConfig","tsProject","languageOptions","globals","globalThis","sourceType","ecmaVersion","parserOptions","ecmaFeatures","impliedStrict","files","plugins","babelPlugin","stylisticPlugin","parser","requireConfigFile","babelOptions","babelrc","configFile","deprecatedAssertSyntax","typescript","project","jsConfig","rules","after","before","properties","curly","allowArrowFunctions","afterColon","beforeColon","mode","max","anonymous","named","asyncArrow","tsConfig","overrides","arrow","formattingConfig"],"mappings":";uTAAO,MAAAA,EAAA,+BAEAC,EAAA,oBCQA,SAAAC,GAAAC,iCAEP,CAAA,GACC,MAAA,CAAA,sFAQC,CAGCC,gBAAAA,CACCC,QAAAA,kBAECC,WAAAA,YAGDC,WAAAA,SACAC,YAAAA,SACAC,cAAAA,CACCC,aAAAA,CACCC,eAAAA,MAIJ,CAGCC,MAAAA,CAAAA,GAIAC,QAAAA,CACC,SAAAC,EACA,aAAAC,GAGDX,gBAAAA,CACCY,OAAAA,EACAP,cAAAA,CACCQ,mBAAAA,EACAV,WAAAA,SACAW,aAAAA,CACCC,SAAAA,EACAC,YAAAA,cAIAP,QAAAA,CAAAA,CAAAA,EAAAA,CAIGQ,wBAAAA,SAOP,CAGCT,MAAAA,CAAAA,GAIAC,QAAAA,CACC,qBAAAS,GAGDlB,gBAAAA,CACCY,OAAAA,EACAP,cAAAA,CACCF,WAAAA,SACAgB,QAAAA,KAKL,CC1FO,MAAAC,EAAA,CACNZ,MAAAA,CAAAA,GAIAa,MAAAA,CACC,mCAAA,CAAA,QAAA,UACA,wBAAA,QACA,mBAAA,CAAA,QAAA,UACA,0BAAA,CAAA,QAAA,+CAECC,OAAAA,EACAC,QAAAA,IAED,2BAAA,QACA,yBAAA,CAAA,QAAA,4BAECC,WAAAA,WAED,0BAAA,CAAA,QAAA,8CAECF,OAAAA,EACAC,QAAAA,IAED,yBAAA,CAAA,QAAA,QACA,uCAAA,CAAA,QAAA,UACAE,MAAAA,QACA,0BAAA,CAAA,QAAA,UACA,eAAA,QACA,sBAAA,QACA,aAAA,CAAA,QAAA,cAAA,CACCC,qBAAAA,IAED,oCAAA,CAAA,QAAA,SACA,oBAAA,CAAA,QAAA,0CAECC,YAAAA,EACAC,aAAAA,EACAC,KAAAA,WAED,6BAAA,QACA,6BAAA,CAAA,QAAA,QACA,wBAAA,QACA,2BAAA,QACA,0BAAA,QACA,sCAAA,uDAECC,IAAAA,IAED,gCAAA,QACA,uBAAA,MACA,kCAAA,MACA,8BAAA,CAAA,QAAA,UACA,mBAAA,CAAA,QAAA,UACA,oBAAA,CAAA,QAAA,UACA,kBAAA,2DAECC,UAAAA,QACAC,MAAAA,QACAC,WAAAA,WAED,6BAAA,CAAA,QAAA,UACA,6BAAA,QACA,6BAAA,QACA,4BAAA,CAAA,QAAA,UACA,uBAAA,CAAA,QAAA,WACA,gCAAA,CAAA,QAAA,WClEKC,EAAA,CACN1B,MAAAA,CAAAA,GAIAa,MAAAA,CACC,oCAAA,uDAIEE,QAAAA,EACAD,OAAAA,EACAa,UAAAA,CACCC,MAAAA,CACCb,QAAAA,EACAD,OAAAA,QCbC,SAAAe,GAAAtC,iCAEP,CAAA,gBAEmBA,cAAUqB,EAAAc,EAI7B"}